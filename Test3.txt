#Test3 (Only testing for h1 and h2 and A*)
#Checking for h1
setState 0 1 2 3 4 5 6 7 8
heurisitc h1
#Expected: 0
setState 1 0 2 3 4 5 6 7 8
heuristic h1
#Expected: 1
setState 7 2 4 5 0 6 8 3 1
heuristic h1
#Expected: 8
#Checking for h2
setState 0 1 2 3 4 5 6 7 8
heuristic h2
#Expected: 0
setState 1 0 2 3 4 5 6 7 8
heuristic h2
#Expected: 1
setState 7 2 4 5 0 6 8 3 1
heuristic h2
#Expected: 18
heuristic h3
#Expected: Error
#Testing A* and repeated states
setState 0 1 2 3 4 5 6 7 8
solve A* h2
#Expected: 0 moves
setState 1 0 2 3 4 5 6 7 8
solve A* h1
#Expected: 1 move
setState 1 0 2 3 4 5 6 7 8
solve A* h2
#Expected: 1 move
setState 7 2 4 5 0 6 8 3 1
solve A* h1
#Expected: Error, max node exceeded
setState 7 2 4 5 0 6 8 3 1
solve A* h2
#Expected: Error, max node exceeded
solve A* h1 maxnodes=1000000
#Expected: 26 moves
solve A* h2 maxnodes=1000000
#Expected: 26 moves
setState 1 4 2 3 5 0 6 7 8
#Demonstrating repeated states are checked
#To demonstrate, I print out the visited list and have the computer tell me when a state is repeated.
solve A* h1 test maxnodes=10000
#Testing for edge case 
setState 1 2 0 3 4 5 6 7 8
solve A* h3
setState 3 2 5 4 1 8 6 7 0
solve A* maxnode=100000
#Display invalid/missing heursitic
#Still solve it using h2